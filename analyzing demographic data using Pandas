import pandas as pd

def calculate_demographic_data(print_data=True):
    # Read the dataset
    df = pd.read_csv('adult_data.csv')

    # Calculate the number of people of each race
    race_count = df['race'].value_counts()

    # Calculate the average age of men
    average_age_men = round(df[df['sex'] == 'Male']['age'].mean(), 1)

    # Calculate the percentage of people with a Bachelor's degree
    percentage_bachelors = round(len(df[df['education'] == 'Bachelors']) / len(df) * 100, 1)

    # Calculate the percentage of people with advanced education earning >50K
    higher_education = df[df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]
    higher_education_rich = round(len(higher_education[higher_education['salary'] == '>50K']) / len(higher_education) * 100, 1)

    # Calculate the percentage of people without advanced education earning >50K
    lower_education = df[~df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]
    lower_education_rich = round(len(lower_education[lower_education['salary'] == '>50K']) / len(lower_education) * 100, 1)

    # Calculate the minimum number of hours a person works per week
    min_work_hours = df['hours-per-week'].min()

    # Calculate the percentage of the people who work the minimum number of hours per week and earn >50K
    num_min_workers = len(df[df['hours-per-week'] == min_work_hours])
    rich_percentage = round(len(df[(df['hours-per-week'] == min_work_hours) & (df['salary'] == '>50K')]) / num_min_workers * 100, 1)

    # Identify the country with the highest percentage of people earning >50K and calculate that percentage
    highest_earning_country = (df[df['salary'] == '>50K']['native-country'].value_counts() / df['native-country'].value_counts()).idxmax()
    highest_earning_country_percentage = round((df[(df['salary'] == '>50K') & (df['native-country'] == highest_earning_country)].shape[0] / df[df['native-country'] == highest_earning_country].shape[0]) * 100, 1)

    # Identify the most popular occupation for those who earn >50K in India
    top_IN_occupation = df[(df['salary'] == '>50K') & (df['native-country'] == 'India')]['occupation'].value_counts().idxmax()

    # Create a dictionary with the calculated values
    demographic_data = {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage': highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }

    # Print the data if requested
    if print_data:
        for key, value in demographic_data.items():
            print(f'{key}: {value}')

    return demographic_data
